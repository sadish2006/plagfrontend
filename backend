Lambda code:

plagiarism code:

import { BedrockRuntimeClient, InvokeModelCommand } from "@aws-sdk/client-bedrock-runtime";

const client = new BedrockRuntimeClient({ region: "us-east-1" });

export const handler = async (event) => {
  console.log("Event Received");

  let body;
  try {
    body = event.body ? JSON.parse(event.body) : event;
  } catch (err) {
    console.error("Failed to parse request body:", err);
    return {
      statusCode: 400,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ error: "Invalid request body." }),
    };
  }

  const inputText = body?.text?.trim();
  if (!inputText) {
    console.log(" No input text received.");
    return {
      statusCode: 400,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ error: "Text input is required." }),
    };
  }

  try {
    const claudePrompt = `
    You are an expert plagiarism detection engine trained to simulate the behavior of research-level plagiarism tools.

Your task is to deeply analyze the given academic or research-style content and estimate the likelihood that this text is plagiarized or copied from existing published research papers, internet articles, academic theses, or AI-generated examples.

Consider:
- Common textbook phrases or frequently reused descriptions
- Lack of originality or generic wording
- Structure or flow that matches known academic templates
- The presence of jargon without unique phrasing
- AI-generated linguistic patterns (predictable tone, grammar, or filler content)

Based on these factors, provide a plagiarism estimation report in this strict JSON format:

{
  "plagiarismPercentage": number
}
Do not include any other text or explanation.

Now analyze this content:
"""${inputText}"""
`;

    const command = new InvokeModelCommand({
      modelId: "anthropic.claude-3-sonnet-20240229-v1:0",
      contentType: "application/json",
      accept: "application/json",
      body: JSON.stringify({
        anthropic_version: "bedrock-2023-05-31",
        messages: [{ role: "user", content: claudePrompt }],
        max_tokens: 800,
        temperature: 0.2,
      }),
    });

    const response = await client.send(command);
    const rawBody = await response.body.transformToString();
    const parsed = JSON.parse(rawBody);
    const contentStr = parsed.content?.[0]?.text || "{}";
    const detectionResult = JSON.parse(contentStr);

    
    console.log(" Plagiarism %:", detectionResult.plagiarismPercentage);

    
    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        plagiarismPercentage: detectionResult.plagiarismPercentage,
      }),
    };
  } catch (err) {
    console.error("Error during Bedrock processing:", err);
    return {
      statusCode: 500,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ error: "Internal server error." }),
    };
  }
};







Ai detector code:

import { BedrockRuntimeClient, InvokeModelCommand } from "@aws-sdk/client-bedrock-runtime";

const client = new BedrockRuntimeClient({ region: "us-east-1" });

export const handler = async (event) => {
  console.log("� Event Received:", JSON.stringify(event));

  let body;
  try {
    body = event.body ? JSON.parse(event.body) : event;
  } catch (err) {
    console.error(" Failed to parse body:", err);
    return {
      statusCode: 400,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ error: "Invalid request body." }),
    };
  }

  const inputText = body?.text?.trim();
  if (!inputText) {
    console.log(" No input text received.");
    return {
      statusCode: 400,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ error: "Text input is required." }),
    };
  }

  try {
    const wordCount = inputText.split(/\s+/).filter(Boolean).length;

    const claudePrompt = `
Analyze the following text and return only JSON (no explanation). Format:

{
  "aiGeneratedProbability": number,
  "humanProbability": number,
  "confidence": "Low" | "Medium" | "High",
  "patterns": [{"type": string, "confidence": "Low" | "Medium" | "High"}]
}

Text:
"""${inputText}"""
`;

    const command = new InvokeModelCommand({
      modelId: "anthropic.claude-3-sonnet-20240229-v1:0",
      contentType: "application/json",
      accept: "application/json",
      body: JSON.stringify({
        anthropic_version: "bedrock-2023-05-31",
        messages: [{ role: "user", content: claudePrompt }],
        max_tokens: 600,
        temperature: 0.2,
      }),
    });

    const response = await client.send(command);
    const rawBody = await response.body.transformToString();
    console.log(" Raw Claude Response:", rawBody);

    const parsed = JSON.parse(rawBody);

    const textBlock = parsed?.content?.[0]?.text;
    if (!textBlock) throw new Error("Claude response missing 'content[0].text'");

    const content = JSON.parse(textBlock);

    const result = {
      aiGeneratedProbability: Math.round(content.aiGeneratedProbability * 100),
      humanProbability: Math.round(content.humanProbability * 100),
      confidence: content.confidence,
      patterns: content.patterns,
      wordsAnalyzed: wordCount,
    };

    console.log(" Final AI Detection Result:", JSON.stringify(result, null, 2));

    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify(result,null,2),
    };
  } catch (err) {
    console.error("Bedrock error:", err);
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ error: "Internal server error." }),
    };
  }
};





Text humanizer


import {
  BedrockRuntimeClient,
  InvokeModelCommand,
} from "@aws-sdk/client-bedrock-runtime"; 

const bedrockClient = new BedrockRuntimeClient({ region: "us-east-1" }); 

// Humanization Logic
const humanizeWithBedrock = async (text) => {
  const body = {
    anthropic_version: "bedrock-2023-05-31",
    messages: [
      {
        role: "user",
        content: `Rewrite the following text to be:
 Human-like, neutral, and formal.
 Maintain its original meaning and approximate length.
Do NOT add commentary, labels, or extraneous text.
Return only the rewritten text.

Original Text:
${text}`
      }
    ],
    max_tokens: 256,
    temperature: 0.3,
    top_p: 0.9,
  };
  
  const command = new InvokeModelCommand({
    modelId: "anthropic.claude-3-sonnet-20240229-v1:0",
    contentType: "application/json",
    accept: "application/json",
    body: JSON.stringify(body),
  });
  
  const response = await bedrockClient.send(command);
  const rawResponse = new TextDecoder("utf-8").decode(response.body);
  const responseBody = JSON.parse(rawResponse);

  console.log("Bedrock rawResponse:", JSON.stringify(responseBody, null, 2));

  if (responseBody?.content?.[0]?.text) {
    return responseBody.content[0].text.trim();
  } else {
    console.error("Bedrock returned unexpected structure:", responseBody);
    return ""; 
  }
};

//  Improved Human Score
const calculateHumanScore = (text) => {
  const words = text.trim().split(/\s+/);
  const uniqueWords = new Set(words);
  const longWords = words.filter((w) => w.length > 6).length;

  const longWordRatio = longWords / words.length;
  const uniqueWordRatio = uniqueWords.size / words.length;

  // Simple measure for variety:
  // Long words, unique words, and slightly adjust for variety
  const combinedRatio = (longWordRatio * 0.5) + (uniqueWordRatio * 0.5);
  const rawScore = combinedRatio * 100;

  return Math.round(Math.min(100, Math.max(30, rawScore)));
};



const calculateReadability = (text) => {
  const words = text.trim().split(/\s+/).length;
  const sentences = text.split(/[.!?]+/).filter(Boolean).length || 1;
  const syllables = text.split(/\s+/).reduce((count, word) => {
    return count + ((word.toLowerCase().match(/[aeiouy]+/g) || []).length);
  }, 0);

  const ASL = words / sentences;
  const ASW = syllables / words;

  const fleschReadingEase = 206.835 - (1.015 * ASL) - (84.6 * ASW);
  // Constrain between 30–100
  return Math.round(Math.min(100, Math.max(30, fleschReadingEase)));
};


export const handler = async (event) => {
  try {
    let text;

    if (event?.body) {
      const body = JSON.parse(event.body);
      text = body.text;
    } else if (event?.text) {
      text = event.text;
    }

    if (!text) {
      return {
        statusCode: 400,
        headers: {
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify({ error: "Missing 'text' in request" }),
      };
    }

    
    const humanized = await humanizeWithBedrock(text);
    if (!humanized) {
      return {
        statusCode: 500,
        headers: {
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify({ error: "Bedrock returned no humanized text" }),
      };
    }

    
    const humanScore = calculateHumanScore(humanized);
    const readabilityScore = calculateReadability(humanized);

    
    console.log("Original Text:", text);
    console.log("Humanized Text:", humanized);
    console.log("Human Score:", humanScore);
    console.log("Readability Score:", readabilityScore);

    //  Final Response
    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        originalText: text,
        humanizedText: humanized,
        humanScore,
        readabilityScore,
      }),
    };
  } catch (error) {
    console.error(error);
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({ error: error.message || "Internal Server Error" }),
    };
  }
};


